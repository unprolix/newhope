name:                newhope
version:             0.1.0.0
license:             Apache-2.0
license-file:        LICENSE
github:		     https://github.com/unprolix/newhope
author:              "Jeremy Bornstein"
maintainer:          "jeremy@bornstein.org"
copyright:           "© 2019 Jeremy Bornstein"
homepage: 	     https://github.com/unprolix/newhope#README.md
bug-reports:	     https://github.com/unprolix/newhope/issuse


# Metadata for publishing
synopsis:            Library implementing the NewHope cryptographic key-exchange protocol
category:            Library, Cryptography


description:
    This is a Haskell implementation of the NewHope key exchange
    protocol. It has been made via examination of the official NewHope
    project's public domain C reference code and the author is not
    affiliated with that team or with NIST.
    .
    This codebase has not yet been reviewed by anyone other than the
    author.  Until such time as it has been competently reviewed,
    please consider it as a draft implementation only, and do not rely
    on it for actual securtiy in practice. Judged by comparison with
    the reference library, it does produce correct results but could
    contain subtle (or obvious!) flaws.  In addition, it has not been
    optimized for performance and at this stage is probably quite a
    bit slower than the reference C implementation on any given
    platform.
    .
    This project uses the Haskell build manager "stack" to produceː
    .
     * A NewHope library intended for general use.
    .
     * "PQCgenKAT" -- a binary which generates KAT (Known Answer Test)
      files in the format required by the NIST PQC project. Invoke this
      binary with the single argument "all" to generate all of the KAT
      files.
    .
     * "speed" -- a binary which runs performance tests of some of the
      NewHope functionality. These tests correspond to largely
      equivalent tests in the reference NewHope C code.
    .
    In addition, the project contains a fair number of automatically-
    evaluated tests that cover a large swath of the important
    functionality implemented, including that tested by the "test"
    binaries built by the reference C source, and including comparison
    between the KAT output that we produce and that produced by the
    reference C implementation. To run the tests and view the results,
    execute "stack test" at a command line.
    .
    लोकाः समस्ताः सुखिनोभवंतु
    .
    Patches, comments, and discussion are welcome. The most appropriate
    place for these for the time being is probably the Github repository.
    .
    .
    For referenceː
    .
     * NewHope projectː
      <https://newhopecrypto.org/>
    .
     * NewHope C reference code official repositoryː
      <https://github.com/newhopecrypto/newhope>


dependencies:
- base >= 4.7 && < 5

ghc-options:         -Wall -O2

extra-source-files:
- README.md
- ChangeLog.md

# We build a library, but internal targets do not use the library
# since they all want access to non-exported internals.
library:
  source-dirs:
    - src
  exposed-modules:
    - Crypto.NewHope
    - Crypto.NewHope.CCA_KEM
    - Crypto.NewHope.CPA_KEM
    - Crypto.NewHope.RNG
    - Crypto.NewHope.SeedExpander
  dependencies:
    - AES              >= 0.2  && < 0.3
    - bytestring       >= 0.10 && < 0.11
    - containers       >= 0.5  && < 0.7
    - deepseq          >= 1.4  && < 1.5
    - mtl              >= 2.2  && < 2.3
    - vector           >= 0.12 && < 0.13



executables: 

 PQCgenKAT:
    main:              PQCgenKAT.hs
    source-dirs:
    - app/kat
    - aux
    - src
    ghc-options:
    - -Wall
    - -O2
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - AES
#   - newhope          # use source because we use internals
    - bytestring
    - containers
    - deepseq
    - mtl
    - system-fileio    >= 0.3  && < 90.4
    - system-filepath  >= 0.4  && < 0.5
    - tasty-quickcheck >= 0.10 && < 0.11
    - text             >= 1.2  && < 1.3
    - vector

 speed:
    main:              Speed.hs
    source-dirs:
    - app/speed
    - aux
    - src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - AES
    - bytestring
    - containers
    - deepseq
    - mtl
#   - newhope          # use source because we use internals
    - tasty-quickcheck
    - vector

tests:
  libtest:
    main:              LibTest.hs
    source-dirs:
    - app/libtest
    - aux
    - src
    - test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - AES
    - HUnit                  >= 1.6  && < 1.7
    - QuickCheck             >= 2.11 && < 2.13
    - bytestring
    - containers
    - deepseq
    - hspec                  >= 2.5  && < 2.7
    - mtl
#   - newhope                # use source because we use internals
    - parallel               >= 3.2  && < 3.3
    - raw-strings-qq         >= 1.1  && < 1.2
    - statistics             >= 0.14 && < 0.16
    - system-fileio
    - system-filepath
    - tasty                  >= 1.1  && < 1.3
    - tasty-expected-failure >= 0.11 && < 0.12
    - tasty-hunit            >= 0.10 && < 0.11
    - tasty-quickcheck
    - text
    - trifecta               >= 2    && < 2.0
    - vector

